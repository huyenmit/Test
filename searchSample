package test;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


public class StepDefinitions_searchSample {
    static WebDriver driver_searchSample;
    static boolean flag;
    String name_expected;
    String sha1_expected;
    String result_expected;
    String dateFrom_expected;
    String dateTo_expected;
    String folderName = "searchSample";
    String _case_;
    String result_Number_actual;

    @Given("^User Logs In_searchSample$")
    public void userLogsIn_searchSample() throws InterruptedException, IOException {
        if (flag == false) {
            flag = true;
            driver_searchSample = common.login_ama(driver_searchSample);
        }
    }

    @When("^input condition sample with \"([^\"]*)\", \"([^\"]*)\", \"([^\"]*)\", \"([^\"]*)\", \"([^\"]*)\" and \"([^\"]*)\"$")
    public void seachSample(String _case, String dateFrom, String dateTo, String name, String sha1, String result) throws InterruptedException, IOException {
        //Open lai man hinh sample de clear
        driver_searchSample.findElement(By.cssSelector("a[href='#/urls']")).click();
        driver_searchSample.findElement(By.cssSelector("a[href='#/samples']")).click();

        //Add ten dieu kien search v√†o list
        _case_ = _case;
        List<String> condition_name = new ArrayList<>();
        condition_name.add("name");
        condition_name.add("sha1");

        //Them value dieu kien search
        List<String> condition_value = new ArrayList<>();
        condition_value.add(name);
        condition_value.add(sha1);

        dateFrom_expected = dateFrom;
        dateTo_expected = dateTo;
        name_expected = name;
        sha1_expected = sha1;
        result_expected = result;


        //Chon thong tin from
        Thread.sleep(2000);
        if (!dateFrom.isEmpty()) {
            driver_searchSample.findElement(By.xpath("//form/div[1]/span")).click();
            common.input_Calender(driver_searchSample, dateFrom);
            //Click button Set
            driver_searchSample.findElement(By.xpath("//owl-date-time-container/div/div/button[2]")).click();
        }

        if (!dateTo.isEmpty()) {
            driver_searchSample.findElement(By.xpath("//form/div[2]/span")).click();
            common.input_Calender(driver_searchSample, dateTo);
            //Click button Set
            driver_searchSample.findElement(By.xpath("//owl-date-time-container/div/div/button[2]")).click();
        }

        //Input thong tin name, sha1, result
        for (int i = 0; i < condition_name.size(); i++) {
            Thread.sleep(500);
            String name_element = String.format("input[formcontrolname='%s']", condition_name.get(i));
            driver_searchSample.findElement(By.cssSelector(name_element)).sendKeys(condition_value.get(i));
            Thread.sleep(500);
        }
        if (!result.isEmpty()) {
            driver_searchSample.findElement(By.cssSelector("ng-select[formcontrolname='malware']")).click();
            String result_element = String.format("//ng-dropdown-panel//*[contains(text(), '%s')]", result);
            driver_searchSample.findElement(By.xpath(result_element)).click();

        }
        Thread.sleep(2000);
        driver_searchSample.findElement(By.cssSelector("button[class*='btn-search']")).click();
    }


    @Then("^Check result number sample with \"([^\"]*)\"$")
    public void check_result_number(String result_Number_expected) throws InterruptedException, IOException {
        int n;
            Thread.sleep(5000);
            n = Integer.parseInt(result_Number_expected);
            String result_Number_actual1 = driver_searchSample.findElement(By.cssSelector("div[class*='total-count'] span")).getText();
            result_Number_actual=result_Number_actual1;
            if (Integer.parseInt(result_Number_actual) != n) {
                common.takeSnapShot(driver_searchSample,folderName, _case_);
                common.writeLog("Result number search sample: expected:" + "<"+ n+"> but was:<"+ result_Number_actual +">");
            }
            Assert.assertEquals(n, Integer.parseInt(result_Number_actual));
    }

    @And("Check result sample")
    public void result_Search() throws ParseException, InterruptedException, IOException {
            Thread.sleep(5000);
            if (Integer.parseInt(result_Number_actual) != 0) {
                int number = 0;
                int count_record = 0;
                int page = Integer.parseInt(result_Number_actual) / 10 + 1;
                boolean stop = false;
                for (int i = 0; i < page; i++) {
                    Thread.sleep(2000);
                    for (int m =0; m < 10; m++) {
                        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        if (!dateFrom_expected.isEmpty()) {
                            String result_date_elm = String.format("//tbody/tr[%d]/td[2]/ngb-highlight", m + 1);
                            String result_date = driver_searchSample.findElement(By.xpath(result_date_elm)).getText();

                            //Convert date
                            Date dateFrom_expected_fm = format.parse(dateFrom_expected);
                            long dateFrom_expected_covert = dateFrom_expected_fm.getTime();
                            Date result_date_fm = format.parse(result_date);
                            long result_date_covert = result_date_fm.getTime();
                            if (result_date_covert < dateFrom_expected_covert) {
                                number++;
                                    common.writeLog(" Date:" + "expected:" + "<" + dateFrom_expected + "> but was:<" + result_date + ">");

                            }
                        }
                        if (!dateTo_expected.isEmpty()) {
                            Thread.sleep(1000);
                            String result_date_elm = String.format("//tbody/tr[%d]/td[2]/ngb-highlight", m + 1);
                            String result_date = driver_searchSample.findElement(By.xpath(result_date_elm)).getText();
                            //Convert date
                            Date dateTo_expected_fm = format.parse(dateTo_expected);
                            long dateTo_expected_covert = dateTo_expected_fm.getTime();
                            Date result_date_fm = format.parse(result_date);
                            long result_date_covert = result_date_fm.getTime();
                            if (result_date_covert > dateTo_expected_covert) {
                                number++;
                                common.writeLog(" Date:" + "expected:" + "<" + dateTo_expected + "> but was:<" + result_date + ">");
                            }
                        }
                        if (!name_expected.isEmpty()) {
                            String result_name_elm = String.format("//tbody/tr[%d]/td[3]/ngb-highlight", m + 1);
                            String result_name = driver_searchSample.findElement(By.xpath(result_name_elm)).getText();
                            if (!result_name.contains(name_expected)) {
                                number++;
                                common.writeLog(" Name sample:" + "expected:" + "<" + name_expected + "> but was:<" + result_name + ">");
                            }

                        }
                        if (!sha1_expected.isEmpty()) {
                            String result_sha1_elm = String.format("//tbody/tr[%d]/td[4]/ngb-highlight", m + 1);
                            String result_sha1 = driver_searchSample.findElement(By.xpath(result_sha1_elm)).getText();
                            if (!result_sha1.contains(sha1_expected)) {
                                number++;
                                common.writeLog(" Sha1:" + "expected:" + "<" + sha1_expected + "> but was:<" + result_sha1 + ">");
                            }
                        }

                        if (!result_expected.isEmpty()) {
                            String result_elm = String.format("//tbody/tr[%d]/td[5]/span", m + 1);
                            String result = driver_searchSample.findElement(By.xpath(result_elm)).getText();
                            if ((result_expected.equalsIgnoreCase("Malicious")) && ((result.equalsIgnoreCase("Clean")) || (result.equalsIgnoreCase("Analyzing")))) {
                                number++;
                                System.out.println("Result actual: " + result + "Result expected:" + result_expected);
                                common.writeLog(" Result:" + "expected:" + "<" + result_expected + "> but was:<" + result + ">");
                            }
                        }
                        count_record++;
                        if (count_record == Integer.parseInt(result_Number_actual)) {
                            stop = true;
                            break;
                        }
                    }
                    if (stop == true) {
                        break;
                    }
                    driver_searchSample.findElement(By.xpath("//li/a[@aria-label='Next']")).click();
                }
                //Compare ket qua
                if (number != 0) {
                    common.takeSnapShot(driver_searchSample, folderName.trim(), _case_);
                }
                Assert.assertEquals(0, number);
            }
        }
    }
