package automation.test;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

public class StepDefinitions_scanSample {
    static WebDriver driver_uploadSample;
    private static boolean flag = false;
    WebDriverWait wait;
    String sha1;
    String _case;
    //Map module va element module
    Map<String, String> module_list_elm = new HashMap<String, String>() {{
//        put("KASPERSKY", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-db_scan_k']");
//        put("EMULATE", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-emulate']");
//        put("VBASCANNER", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-vbascanner']");
//        put("SANDBOX", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-sandbox']");
//        put("BLACKLIST_SCAN_FILE", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-blacklist_scan_file']");
//        put("WEBSHELL", "button[class^='ng-tns-c177-1 btn w-100 text-left text-light btn-toggle-webshell']");
        put("KASPERSKY", "button[class*='btn w-100 text-left text-light btn-toggle-db_scan_k']");
        put("EMULATE", "button[class*='btn w-100 text-left text-light btn-toggle-emulate']");
        put("VBASCANNER", "button[class*='btn w-100 text-left text-light btn-toggle-vbascanner']");
        put("SANDBOX", "button[class*='btn w-100 text-left text-light btn-toggle-sandbox']");
        put("BLACKLIST_SCAN_FILE", "button[class*='btn w-100 text-left text-light btn-toggle-blacklist_scan_file']");
        put("WEBSHELL", "button[class*='btn w-100 text-left text-light btn-toggle-webshell']");
    }};

    String[] moduleName;
    String resultExpect;
    @Given("^User Logs In_scanSample$")
    public void userLogsIn_scanSample() throws InterruptedException {
        if(flag==false) {
            flag=true;
            driver_uploadSample = common.login_ama(driver_uploadSample);
        }
    }
    @When("^Upload file as \"([^\"]*)\" and \"([^\"]*)\", \"([^\"]*)\", \"([^\"]*)\"$")
    public void scan_Sample(String _case, String fileSample, String choose_moduleName, String result) throws InterruptedException {
        //Tao mang 1 chieu cho choose_moduleName
        moduleName = choose_moduleName.split(",");
        fileSample = "D:\\Download_default\\virus_huyenpt\\" + fileSample;

        //Upload file de scan
        new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector("a[href='#/upload']"))).click();
        Thread.sleep(5000);
        driver_uploadSample.findElement(By.id("uploadFile")).sendKeys(fileSample);
        new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.xpath("//div/div/button[@id='btn-select-scan-modules']"))).click();

        //Clear all module da chon de scan
        for (Map.Entry<String, String> module : module_list_elm.entrySet()) {
            Thread.sleep(500);
            new WebDriverWait(driver_uploadSample, 30).until(ExpectedConditions.elementToBeClickable(By.cssSelector(module.getValue()))).click();
        }

        //Chon module can scan
        for (int i = 0; i < moduleName.length; i++) {
            Thread.sleep(500);
            new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector(module_list_elm.get(moduleName[i])))).click();
        }
        //Chon upload va chon rescan
        new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[class^='btn-upload']"))).click();
        new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[class^='btn-rescan btn btn-primary mr-3']"))).click();

        //Get ket qua module ket luan
        new WebDriverWait(driver_uploadSample, 120).until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("#tab-summary .res__is-malware span"))).getText();
        while ((resultExpect == null) || (resultExpect.equals("ANALYZING"))) {
            Thread.sleep(1000);
            resultExpect = driver_uploadSample.findElement(By.cssSelector("#tab-summary .res__is-malware span")).getText();
        }
        sha1 = driver_uploadSample.findElement(By.cssSelector("#tab-summary .rp__sha1 span")).getText();

        //Compare ket qua
        if (!resultExpect.equals(result)) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
            LocalDateTime now = LocalDateTime.now();
            common.takeSnapShot(driver_uploadSample, "D:\\AutoAMA\\sample\\" + _case + "_" + dtf.format(now) + ".png");
        }
        Assert.assertEquals(result, resultExpect);
    }


    @Then("^Result analysis with \"([^\"]*)\"$")
    public void result_Analyze(String malwareName) throws InterruptedException {
        //Tao mang 1 chieu luu ket qua cua tung module
        String[] arr_moduleResult = malwareName.split(",");

        //Tao mang 2 chieu thong tin expected
        String[][] moduleName_ = new String[moduleName.length][2];
        for (int i = 0; i < moduleName.length; i++) {
            moduleName_[i][0] = moduleName[i];
            moduleName_[i][1] = arr_moduleResult[i];
        }

        ///Get thong tin actual roi cho vao mang 1 chieu
        String[] arr_moduleName_actual = new String[moduleName.length];
        String[] arr_moduleResult_actual = new String[arr_moduleResult.length];
        for (int j = 0; j < moduleName.length; j++) {
            String element_moduleName = String.format("#tab-summary .module-result:nth-of-type(%d) span", j + 1);//Get module name
            arr_moduleName_actual[j] = new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector(element_moduleName))).getText();
            while (arr_moduleName_actual[j] == null) {
                arr_moduleName_actual[j] = driver_uploadSample.findElement(By.cssSelector(element_moduleName)).getText();

            }
            String element_resultTooltip = String.format("#tab-summary .module-result:nth-of-type(%d) i.fa", j + 1);//Get ket qua tooltip cua tung module
            String[] arr_resultTooltip = new String[moduleName.length];
            arr_resultTooltip[j] = new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector(element_resultTooltip))).getAttribute("ng-reflect-ngb-tooltip");
            while ((arr_resultTooltip[j] == null) || (arr_resultTooltip[j].equals("Analyzing"))) {
                Thread.sleep(2000);
                arr_resultTooltip[j] = new WebDriverWait(driver_uploadSample, 20).until(ExpectedConditions.elementToBeClickable(By.cssSelector(element_resultTooltip))).getAttribute("ng-reflect-ngb-tooltip");
            }

            String element_moduleResult = String.format("#tab-summary .module-result:nth-of-type(%d) div.mres__malware-name span", j + 1);//Get malware name
            if (arr_resultTooltip[j].equals("Malicious")) {
                arr_moduleResult_actual[j] = driver_uploadSample.findElement(By.cssSelector(element_moduleResult)).getText();
                while (arr_moduleResult_actual[j] == null) {
                    new WebDriverWait(driver_uploadSample, 240).until(ExpectedConditions.elementToBeClickable(By.cssSelector(element_moduleResult))).click();
                    arr_moduleResult_actual[j] = driver_uploadSample.findElement(By.cssSelector(element_moduleResult)).getText();
                }
            } else {
                arr_moduleResult_actual[j] = "NoMalware";
            }
        }

        //Tao mang 2 chieu get thong tin actual
        String[][] moduleResult_actual = new String[arr_moduleName_actual.length][2];
        for (int m = 0; m < arr_moduleName_actual.length; m++) {
            moduleResult_actual[m][0] = arr_moduleName_actual[m];
            moduleResult_actual[m][1] = arr_moduleResult_actual[m];
        }

        //Compare  2 mang 2 chieu expected vÃ  actual
        int count = 0;
        for (int i = 0; i < moduleName.length; i++)
            for (int j = 0; j < moduleResult_actual.length; j++) {
                Thread.sleep(100);
                if ((moduleName_[i][0].trim().equals(moduleResult_actual[j][0])) && (!moduleName_[i][1].trim().equals(moduleResult_actual[j][1]))) {
                    count++;
                    if (count != 0) {
                        System.out.println(" moduleName[i][0] actual=" + moduleName_[i][0]);
                        System.out.println("moduleResult_actual[j][0] actual=" + moduleResult_actual[j][0]);
                        System.out.println("moduleName[i][0] expected=" + moduleName_[i][1]);
                        System.out.println("moduleResult_actual[j][0] expected=" + moduleResult_actual[j][1]);
                    }
                }
            }
        if (count != 0) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
            LocalDateTime now = LocalDateTime.now();
            common.takeSnapShot(driver_uploadSample, "D:\\AutoAMA\\sample\\" + _case + "_" + dtf.format(now) + ".png");
        }
        Assert.assertEquals(0, count);
    }

}
