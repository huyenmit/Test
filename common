package test;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class common {
    public static WebDriver login_ama(WebDriver driver) throws InterruptedException, IOException {
        //Read file properties
        Properties properties = new Properties();
        try {
            properties.load(new FileInputStream("Config.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        String dName = properties.getProperty("driverName");
        String dUrl = properties.getProperty("driverUrl");
        String url = properties.getProperty("urlLogin");
        String uName = properties.getProperty("userName");
        String pwd = properties.getProperty("password");
        String url_Download = properties.getProperty("url_Download");
        System.setProperty(dName, dUrl);

        //Check exit folder download
        File f = new File(url_Download);
        if (!f.exists()) {
            f.createNewFile();
        }

        //Setting duong dan download default
        String downloadFilepath = url_Download;
        HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
        chromePrefs.put("profile.default_content_settings.popups", 0);
        chromePrefs.put("download.default_directory", downloadFilepath);
        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("prefs", chromePrefs);
        DesiredCapabilities cap = DesiredCapabilities.chrome();
        cap.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
        cap.setCapability(ChromeOptions.CAPABILITY, options);
        driver = new ChromeDriver(cap);

        //Open link url
        driver.navigate().to(url);
        driver.manage().window().maximize();
        driver.findElement(By.id("details-button")).click();
        driver.findElement(By.id("proceed-link")).click();

        //input user, pass
        driver.findElement(By.cssSelector("input[name='username']")).sendKeys(uName);
        driver.findElement(By.cssSelector("input[type='password']")).sendKeys(pwd);
        driver.findElement(By.id("btn-login")).click();
        Thread.sleep(1000);
        return driver;
    }

    public static void writeLog(String text) throws IOException {
        Properties properties = new Properties();
        try {
            properties.load(new FileInputStream("Config.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        String urlLog = properties.getProperty("urlLog");

        File f= new File(urlLog + "log.txt");
        if (!f.exists()) {
            f.createNewFile();
        }

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        Files.write(Paths.get(urlLog+ "log.txt"), (dtf.format(now) + "  " + text + "\r\n").getBytes(), StandardOpenOption.APPEND);
    }

    public static void takeSnapShot(WebDriver driver, String folderName, String _case_) throws IOException {
        Properties properties = new Properties();
        try {
            properties.load(new FileInputStream("Config.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        String forderCapture = properties.getProperty("capture");
        File f = new File(folderName);
        if (!f.exists()) {
            f.createNewFile();
        }
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy_MM_dd");
        LocalDateTime now = LocalDateTime.now();
        JavascriptExecutor jexec = (JavascriptExecutor) driver;
        boolean isScrollBarPresent = (boolean) jexec.executeScript("return document.getElementById('default-layout').scrollHeight>document.getElementById('default-layout').clientHeight");
        long scrollHeight = (long) jexec.executeScript("return document.getElementById('default-layout').scrollHeight");
        long clientHeight = (long) jexec.executeScript("return document.getElementById('default-layout').clientHeight");
        int fileIndex = 1;
        if (driver instanceof ChromeDriver) {
            if (isScrollBarPresent) {
                while (scrollHeight > 0) {
                    File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                    FileUtils.copyFile(scrFile, new File(forderCapture + folderName + "\\" + dtf.format(now) + "\\" + _case_ + "_" + fileIndex + ".png"));
                    jexec.executeScript("document.getElementById('default-layout').scrollTo(0," + clientHeight * fileIndex++ + ")");
                    scrollHeight = scrollHeight - clientHeight;
                }
            } else {
                File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                FileUtils.copyFile(scrFile, new File(forderCapture + folderName + "\\" + dtf.format(now) + "\\" + _case_ + "_" + fileIndex + ".png"));
            }
        } else {
            File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(scrFile, new File(forderCapture + folderName + "\\" + dtf.format(now) + "\\" + _case_ + "_" + fileIndex + ".png"));
        }
    }

    public static void input_Calender(WebDriver driver, String date) throws InterruptedException {
        Map<String, String> date_English = new HashMap<String, String>() {{
            put("Jan", "1");
            put("Feb", "2");
            put("Mar", "3");
            put("Apr", "4");
            put("May", "5");
            put("Jun", "6");
            put("Jul", "7");
            put("Aug", "8");
            put("Sep", "9");
            put("Oct", "10");
            put("Nov", "11");
            put("Dec", "12");

        }};
        String dateFrom_yyyy_MM_dd[] = (date.split(" ")[0]).split("-");
        String dateFrom_HH_mm_ss[] = (date.split(" ")[1]).split(":");
        driver.findElement(By.xpath("//button[@aria-label='Choose month and year']")).click();
        boolean stop_month = false;
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 3; j++) {
                String year_from_elm = String.format("//owl-date-time-multi-year-view//tbody//tr[%d]/td[%d]/span", i + 1, j + 1);
                String year_from = driver.findElement(By.xpath(year_from_elm)).getText();
                if (year_from.equals(dateFrom_yyyy_MM_dd[0])) {
                    driver.findElement(By.xpath(year_from_elm)).click();
                    stop_month = true;
                    break;
                }
            }
            if (stop_month == true) {
                break;
            }
        }
        //Chon thong tin month
        String month_from;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                String month_from_elm = String.format("//owl-date-time-year-view//tbody/tr[%d]/td[%d]/span", i + 1, j + 1);
                month_from = driver.findElement(By.xpath(month_from_elm)).getText();
                for (Map.Entry<String, String> date_E : date_English.entrySet()) {
                    if (month_from.equals(date_E.getKey())) {
                        month_from = date_E.getValue();
                        break;
                    }
                }
                if (Integer.parseInt(month_from) == (Integer.parseInt(dateFrom_yyyy_MM_dd[1]))) {
                    driver.findElement(By.xpath(month_from_elm)).click();
                    stop_month = true;
                    break;
                }
            }
            if (stop_month == true) {
                break;
            }
        }
        //Chon thong tin day
        boolean stop_day = false;
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 7; j++) {
                String day_from_elm = String.format("//owl-date-time-month-view//tbody/tr[%d]/td[%d]/span", i + 1, j + 1);
                String day_from = driver.findElement(By.xpath(day_from_elm)).getText();
                String day_from_class = driver.findElement(By.xpath(day_from_elm)).getAttribute("class");
                if (day_from_class.equals("owl-dt-calendar-cell-content owl-dt-calendar-cell-out")) {
                    continue;
                } else {
                    if (day_from.equals(dateFrom_yyyy_MM_dd[2])) {
                        driver.findElement(By.xpath(day_from_elm)).click();
                        stop_day = true;
                        break;
                    }
                }
            }
            if (stop_day == true) {
                break;
            }
        }
        //Input HH:mm:ss
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[1]//input")).clear();
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[1]//input")).sendKeys(dateFrom_HH_mm_ss[0]);
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[2]//input")).clear();
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[2]//input")).sendKeys(dateFrom_HH_mm_ss[1]);
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[3]//input")).clear();
        driver.findElement(By.xpath("//owl-date-time-timer/owl-date-time-timer-box[3]//input")).sendKeys(dateFrom_HH_mm_ss[2]);
        Thread.sleep(300);
        return;
    }
}
